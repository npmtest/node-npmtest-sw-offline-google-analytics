{"/home/travis/build/npmtest/node-npmtest-sw-offline-google-analytics/test.js":"/* istanbul instrument in package npmtest_sw_offline_google_analytics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sw-offline-google-analytics/lib.npmtest_sw_offline_google_analytics.js":"/* istanbul instrument in package npmtest_sw_offline_google_analytics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sw_offline_google_analytics = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sw_offline_google_analytics = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sw-offline-google-analytics/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sw-offline-google-analytics && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sw_offline_google_analytics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sw_offline_google_analytics\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sw_offline_google_analytics.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sw_offline_google_analytics.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sw_offline_google_analytics.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sw_offline_google_analytics.__dirname + '/lib.npmtest_sw_offline_google_analytics.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sw-offline-google-analytics/node_modules/sw-offline-google-analytics/build/offline-google-analytics-import.min.js":"/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n(function(a,b){'object'==typeof exports&&'undefined'!=typeof module?module.exports=b():'function'==typeof define&&define.amd?define(b):(a.goog=a.goog||{},a.goog.offlineGoogleAnalytics=b())})(this,function(){'use strict';var a={CACHE_NAME:'offline-google-analytics',IDB:{NAME:'offline-google-analytics',STORE:'urls',VERSION:1},MAX_ANALYTICS_BATCH_SIZE:20,STOP_RETRYING_AFTER:172800000,URL:{ANALYTICS_JS_PATH:'/analytics.js',COLLECT_PATH:'/collect',HOST:'www.google-analytics.com'}},b=function createCommonjsModule(q,r){return r={exports:{}},q(r,r.exports),r.exports}(function(q){'use strict';(function(){function toArray(s){return Array.prototype.slice.call(s)}function promisifyRequest(s){return new Promise(function(t,u){s.onsuccess=function(){t(s.result)},s.onerror=function(){u(s.error)}})}function promisifyRequestCall(s,t,u){var v,w=new Promise(function(x,y){v=s[t].apply(s,u),promisifyRequest(v).then(x,y)});return w.request=v,w}function promisifyCursorRequestCall(s,t,u){var v=promisifyRequestCall(s,t,u);return v.then(function(w){return w?new Cursor(w,v.request):void 0})}function proxyProperties(s,t,u){u.forEach(function(v){Object.defineProperty(s.prototype,v,{get:function(){return this[t][v]},set:function(w){this[t][v]=w}})})}function proxyRequestMethods(s,t,u,v){v.forEach(function(w){w in u.prototype&&(s.prototype[w]=function(){return promisifyRequestCall(this[t],w,arguments)})})}function proxyMethods(s,t,u,v){v.forEach(function(w){w in u.prototype&&(s.prototype[w]=function(){return this[t][w].apply(this[t],arguments)})})}function proxyCursorRequestMethods(s,t,u,v){v.forEach(function(w){w in u.prototype&&(s.prototype[w]=function(){return promisifyCursorRequestCall(this[t],w,arguments)})})}function Index(s){this._index=s}function Cursor(s,t){this._cursor=s,this._request=t}function ObjectStore(s){this._store=s}function Transaction(s){this._tx=s,this.complete=new Promise(function(t,u){s.oncomplete=function(){t()},s.onerror=function(){u(s.error)},s.onabort=function(){u(s.error)}})}function UpgradeDB(s,t,u){this._db=s,this.oldVersion=t,this.transaction=new Transaction(u)}function DB(s){this._db=s}proxyProperties(Index,'_index',['name','keyPath','multiEntry','unique']),proxyRequestMethods(Index,'_index',IDBIndex,['get','getKey','getAll','getAllKeys','count']),proxyCursorRequestMethods(Index,'_index',IDBIndex,['openCursor','openKeyCursor']),proxyProperties(Cursor,'_cursor',['direction','key','primaryKey','value']),proxyRequestMethods(Cursor,'_cursor',IDBCursor,['update','delete']),['advance','continue','continuePrimaryKey'].forEach(function(s){s in IDBCursor.prototype&&(Cursor.prototype[s]=function(){var t=this,u=arguments;return Promise.resolve().then(function(){return t._cursor[s].apply(t._cursor,u),promisifyRequest(t._request).then(function(v){return v?new Cursor(v,t._request):void 0})})})}),ObjectStore.prototype.createIndex=function(){return new Index(this._store.createIndex.apply(this._store,arguments))},ObjectStore.prototype.index=function(){return new Index(this._store.index.apply(this._store,arguments))},proxyProperties(ObjectStore,'_store',['name','keyPath','indexNames','autoIncrement']),proxyRequestMethods(ObjectStore,'_store',IDBObjectStore,['put','add','delete','clear','get','getAll','getKey','getAllKeys','count']),proxyCursorRequestMethods(ObjectStore,'_store',IDBObjectStore,['openCursor','openKeyCursor']),proxyMethods(ObjectStore,'_store',IDBObjectStore,['deleteIndex']),Transaction.prototype.objectStore=function(){return new ObjectStore(this._tx.objectStore.apply(this._tx,arguments))},proxyProperties(Transaction,'_tx',['objectStoreNames','mode']),proxyMethods(Transaction,'_tx',IDBTransaction,['abort']),UpgradeDB.prototype.createObjectStore=function(){return new ObjectStore(this._db.createObjectStore.apply(this._db,arguments))},proxyProperties(UpgradeDB,'_db',['name','version','objectStoreNames']),proxyMethods(UpgradeDB,'_db',IDBDatabase,['deleteObjectStore','close']),DB.prototype.transaction=function(){return new Transaction(this._db.transaction.apply(this._db,arguments))},proxyProperties(DB,'_db',['name','version','objectStoreNames']),proxyMethods(DB,'_db',IDBDatabase,['close']),['openCursor','openKeyCursor'].forEach(function(s){[ObjectStore,Index].forEach(function(t){t.prototype[s.replace('open','iterate')]=function(){var u=toArray(arguments),v=u[u.length-1],w=this._store||this._index,x=w[s].apply(w,u.slice(0,-1));x.onsuccess=function(){v(x.result)}}})}),[Index,ObjectStore].forEach(function(s){s.prototype.getAll||(s.prototype.getAll=function(t,u){var v=this,w=[];return new Promise(function(x){v.iterateCursor(t,function(y){return y?(w.push(y.value),void 0!==u&&w.length==u?void x(w):void y.continue()):void x(w)})})})});q.exports={open:function(s,t,u){var v=promisifyRequestCall(indexedDB,'open',[s,t]),w=v.request;return w.onupgradeneeded=function(x){u&&u(new UpgradeDB(w.result,x.oldVersion,w.transaction))},v.then(function(x){return new DB(x)})},delete:function(s){return promisifyRequestCall(indexedDB,'deleteDatabase',[s])}}})()});class IDBHelper{constructor(q,r,s){if(q==void 0||r==void 0||s==void 0)throw Error('name, version, storeName must be passed to the constructor.');this._name=q,this._version=r,this._storeName=s}_getDb(){return this._dbPromise?this._dbPromise:(this._dbPromise=b.open(this._name,this._version,(q)=>{q.createObjectStore(this._storeName)}).then((q)=>{return q}),this._dbPromise)}close(){return this._dbPromise?this._dbPromise.then((q)=>{q.close(),this._dbPromise=null}):void 0}put(q,r){return this._getDb().then((s)=>{const t=s.transaction(this._storeName,'readwrite'),u=t.objectStore(this._storeName);return u.put(r,q),t.complete})}delete(q){return this._getDb().then((r)=>{const s=r.transaction(this._storeName,'readwrite'),t=s.objectStore(this._storeName);return t.delete(q),s.complete})}get(q){return this._getDb().then((r)=>{return r.transaction(this._storeName).objectStore(this._storeName).get(q)})}getAllValues(){return this._getDb().then((q)=>{return q.transaction(this._storeName).objectStore(this._storeName).getAll()})}getAllKeys(){return this._getDb().then((q)=>{return q.transaction(this._storeName).objectStore(this._storeName).getAllKeys()})}}const c=new IDBHelper(a.IDB.NAME,a.IDB.VERSION,a.IDB.STORE);var d=(q,r)=>{const s=new URL(q.url);return q.text().then((t)=>{return t&&(s.search=t),c.put(s.toString(),r||Date.now())})};class LogGroup{constructor({title:q,isPrimary:r}={}){this._isPrimary=r||!1,this._groupTitle=q||'',this._logs=[],this._childGroups=[],this._isFirefox=!1,/Firefox\\/\\d*\\.\\d*/.exec(navigator.userAgent)&&(this._isFirefox=!0),this._isEdge=!1,/Edge\\/\\d*\\.\\d*/.exec(navigator.userAgent)&&(this._isEdge=!0)}addLog(q){this._logs.push(q)}addChildGroup(q){0===q._logs.length||this._childGroups.push(q)}print(){return this._isEdge?this._printEdgeFriendly():void(this._openGroup(),this._logs.forEach((q)=>{this._printLogDetails(q)}),this._childGroups.forEach((q)=>{q.print()}),this._closeGroup())}_printEdgeFriendly(){this._logs.forEach((q)=>{let s=q.message;'string'==typeof s&&(s=s.replace(/%c/g,''));const t=[s];q.error&&t.push(q.error),q.args&&t.push(q.args);const u=q.logFunc||console.log;u(...t)}),this._childGroups.forEach((q)=>{q.print()})}_printLogDetails(q){const r=q.logFunc?q.logFunc:console.log;let s=q.message,t=[s];q.colors&&!this._isEdge&&(t=t.concat(q.colors)),q.args&&(t=t.concat(q.args)),r(...t)}_openGroup(){if(this._isPrimary){if(0===this._childGroups.length)return;const q=this._logs.shift();if(this._isFirefox)return void this._printLogDetails(q);q.logFunc=console.group,this._printLogDetails(q)}else console.groupCollapsed(this._groupTitle)}_closeGroup(){this._isPrimary&&0===this._childGroups.length||console.groupEnd()}}self.goog=self.goog||{},self.goog.LOG_LEVEL=self.goog.LOG_LEVEL||{none:-1,verbose:0,debug:1,warn:2,error:3};const e=`#bdc3c7`,f=`#7f8c8d`,g=`#2ecc71`,h=`#f1c40f`,i=`#e74c3c`,j=`#3498db`;var k=new class LogHelper{constructor(){this._defaultLogLevel='localhost'===location.hostname?self.goog.LOG_LEVEL.debug:self.goog.LOG_LEVEL.none}log(q){this._printMessage(self.goog.LOG_LEVEL.verbose,q)}debug(q){this._printMessage(self.goog.LOG_LEVEL.debug,q)}warn(q){this._printMessage(self.goog.LOG_LEVEL.warn,q)}error(q){this._printMessage(self.goog.LOG_LEVEL.error,q)}_printMessage(q,r){if(this._shouldLogMessage(q,r)){const s=this._getAllLogGroups(q,r);s.print()}}_getAllLogGroups(q,r){const s=new LogGroup({isPrimary:!0,title:'sw-helpers log.'}),t=this._getPrimaryMessageDetails(q,r);if(s.addLog(t),r.error){const v={message:r.error,logFunc:console.error};s.addLog(v)}const u=new LogGroup({title:'Extra Information.'});if(r.that&&r.that.constructor&&r.that.constructor.name){const v=r.that.constructor.name;u.addLog(this._getKeyValueDetails('class',v))}return r.data&&('object'!=typeof r.data||r.data instanceof Array?u.addLog(this._getKeyValueDetails('additionalData',r.data)):Object.keys(r.data).forEach((v)=>{u.addLog(this._getKeyValueDetails(v,r.data[v]))})),s.addChildGroup(u),s}_getKeyValueDetails(q,r){return{message:`%c${q}: `,colors:[`color: ${j}`],args:r}}_getPrimaryMessageDetails(q,r){let s,t;q===self.goog.LOG_LEVEL.verbose?(s='Info',t=e):q===self.goog.LOG_LEVEL.debug?(s='Debug',t=g):q===self.goog.LOG_LEVEL.warn?(s='Warn',t=h):q===self.goog.LOG_LEVEL.error?(s='Error',t=i):void 0;let u=`%c🔧 %c[${s}]`;const v=[`color: ${e}`,`color: ${t}`];let w;return'string'==typeof r?w=r:r.message&&(w=r.message),w&&(u+=`%c ${w}`,v.push(`color: ${f}; font-weight: normal`)),{message:u,colors:v}}_shouldLogMessage(q,r){if(!r)return!1;let s=this._defaultLogLevel;return self&&self.goog&&'number'==typeof self.goog.logLevel&&(s=self.goog.logLevel),s===self.goog.LOG_LEVEL.none||q<s?!1:!0}};const l=new IDBHelper(a.IDB.NAME,a.IDB.VERSION,a.IDB.STORE);var m=(q)=>{return q=q||{},l.getAllKeys().then((r)=>{return Promise.all(r.map((s)=>{return l.get(s).then((t)=>{const u=Date.now()-t,v=new URL(s);if(!(u>a.STOP_RETRYING_AFTER)&&'searchParams'in v){let w=q.parameterOverrides||{};w.qt=u,Object.keys(w).sort().forEach((y)=>{v.searchParams.set(y,w[y])});let x=q.hitFilter;if('function'==typeof x)try{x(v.searchParams)}catch(y){return}return fetch(v.toString())}}).then(()=>l.delete(s))}))})};return{initialize:(q)=>{q=q||{};let r=!1;self.addEventListener('fetch',(s)=>{const t=new URL(s.request.url),u=s.request;if(t.hostname===a.URL.HOST)if(t.pathname===a.URL.COLLECT_PATH){const v=u.clone();s.respondWith(fetch(u).then((w)=>{return r&&m(q),r=!1,w},()=>{return k.log('Enqueuing failed request...'),r=!0,d(v).then(()=>Response.error())}))}else t.pathname===a.URL.ANALYTICS_JS_PATH&&s.respondWith(caches.open(a.CACHE_NAME).then((v)=>{return fetch(u).then((w)=>{return v.put(u,w.clone()).then(()=>w)}).catch((w)=>{return k.error(w),v.match(u)})}))}),m(q)}}});\n//# sourceMappingURL=offline-google-analytics-import.min.js.map\n","/home/travis/build/npmtest/node-npmtest-sw-offline-google-analytics/node_modules/sw-offline-google-analytics/src/index.js":"/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/* eslint-env worker, serviceworker */\n\nimport constants from './lib/constants.js';\nimport enqueueRequest from './lib/enqueue-request.js';\nimport logHelper from '../../../lib/log-helper.js';\nimport replayQueuedRequests from './lib/replay-queued-requests.js';\n\n/**\n * In order to use the library, call`goog.offlineGoogleAnalytics.initialize()`.\n * It will take care of setting up service worker `fetch` handlers to ensure\n * that the Google Analytics JavaScript is available offline, and that any\n * Google Analytics requests made while offline are saved (using `IndexedDB`)\n * and retried the next time the service worker starts up.\n *\n * @example\n * // This code should live inside your service worker JavaScript, ideally\n * // before any other 'fetch' event handlers are defined:\n *\n * // First, import the library into the service worker global scope:\n * importScripts('path/to/offline-google-analytics-import.js');\n *\n * // Then, call goog.offlineGoogleAnalytics.initialize():\n * goog.offlineGoogleAnalytics.initialize();\n *\n * // At this point, implement any other service worker caching strategies\n * // appropriate for your web app.\n *\n * @example\n * // If you need to specify parameters to be sent with each hit, you can use\n * // the `parameterOverrides` configuration option. This is useful in cases\n * // where you want to set a custom dimension on all hits sent by the service\n * // worker to differentiate them in your reports later.\n * goog.offlineGoogleAnalytics.initialize({\n *   parameterOverrides: {\n *     cd1: 'replay'\n *   }\n * });\n *\n * @example\n * // In situations where you need to programmatically modify a hit's\n * // parameters you can use the `hitFilter` option. One example of when this\n * // might be useful is if you wanted to track the amount of time that elapsed\n * // between when the hit was attempted and when it was successfully replayed.\n * goog.offlineGoogleAnalytics.initialize({\n *   hitFilter: searchParams =>\n *     // Sets the `qt` param as a custom metric.\n *     const qt = searchParams.get('qt');\n *     searchParams.set('cm1', qt);\n *   }\n * });\n *\n * @module sw-offline-google-analytics\n */\n\n/**\n * @alias goog.offlineGoogleAnalytics.initialize\n * @param {Object=}   config\n * @param {Object=}   config.parameterOverrides\n *                    [Measurement Protocol parameters](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters),\n *                    expressed as key/value pairs, to be added to replayed\n *                    Google Analytics requests. This can be used to, e.g., set\n *                    a custom dimension indicating that the request was\n *                    replayed.\n * @param {Function=} config.hitFilter\n *                    A function that allows you to modify the hit parameters\n *                    prior to replaying the hit. The function is invoked with\n *                    the original hit's URLSearchParams object as its only\n *                    argument. To abort the hit and prevent it from being\n *                    replayed, throw an error.\n * @memberof module:sw-offline-google-analytics\n */\nconst initialize = (config) => {\n  config = config || {};\n\n  // Stores whether or not the previous /collect request failed.\n  let previousHitFailed = false;\n\n  self.addEventListener('fetch', (event) => {\n    const url = new URL(event.request.url);\n    const request = event.request;\n\n    if (url.hostname === constants.URL.HOST) {\n      if (url.pathname === constants.URL.COLLECT_PATH) {\n        // If this is a /collect request, then use a network-first strategy,\n        // falling back to queueing the request in IndexedDB.\n\n        // Make a clone of the request before we use it, in case we need\n        // to read the request body later on.\n        const clonedRequest = request.clone();\n\n        event.respondWith(\n          fetch(request).then((response) => {\n            if (previousHitFailed) {\n              replayQueuedRequests(config);\n            }\n            previousHitFailed = false;\n            return response;\n          }, (error) => {\n            logHelper.log('Enqueuing failed request...');\n            previousHitFailed = true;\n            return enqueueRequest(clonedRequest).then(() => Response.error());\n          })\n        );\n      } else if (url.pathname === constants.URL.ANALYTICS_JS_PATH) {\n        // If this is a request for the Google Analytics JavaScript library,\n        // use the network first, falling back to the previously cached copy.\n        event.respondWith(\n          caches.open(constants.CACHE_NAME).then((cache) => {\n            return fetch(request).then((response) => {\n              return cache.put(request, response.clone()).then(() => response);\n            }).catch((error) => {\n              logHelper.error(error);\n              return cache.match(request);\n            });\n          })\n        );\n      }\n    }\n  });\n\n  replayQueuedRequests(config);\n};\n\nexport default {initialize};\n","/home/travis/build/npmtest/node-npmtest-sw-offline-google-analytics/node_modules/sw-offline-google-analytics/src/lib/constants.js":"/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nexport default {\n  CACHE_NAME: 'offline-google-analytics',\n  IDB: {\n    NAME: 'offline-google-analytics',\n    STORE: 'urls',\n    VERSION: 1,\n  },\n  MAX_ANALYTICS_BATCH_SIZE: 20,\n  STOP_RETRYING_AFTER: 1000 * 60 * 60 * 48, // Two days, in milliseconds.\n  URL: {\n    ANALYTICS_JS_PATH: '/analytics.js',\n    COLLECT_PATH: '/collect',\n    HOST: 'www.google-analytics.com',\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-sw-offline-google-analytics/node_modules/sw-offline-google-analytics/src/lib/enqueue-request.js":"/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/* eslint-env worker, serviceworker */\n\nimport IDBHelper from '../../../../lib/idb-helper.js';\nimport constants from './constants.js';\n\nconst idbHelper = new IDBHelper(constants.IDB.NAME, constants.IDB.VERSION,\n  constants.IDB.STORE);\n\n/**\n * Adds a URL to IndexedDB, along with the current timestamp.\n *\n * If the request has a body, that body will be used as the URL's search\n * parameters when saving the URL to IndexedDB.\n *\n * If no `time` parameter is provided, Date.now() will be used.\n *\n * @private\n * @param {Request} request\n*  @param {Number} [time]\n * @return {Promise.<T>} A promise that resolves when IndexedDB is updated.\n */\nexport default (request, time) => {\n  const url = new URL(request.url);\n  return request.text().then((body) => {\n    // If there's a request body, then use it as the URL's search value.\n    // This is most likely because the original request was an HTTP POST\n    // that uses the beacon transport.\n    if (body) {\n      url.search = body;\n    }\n\n    return idbHelper.put(url.toString(), time || Date.now());\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-sw-offline-google-analytics/node_modules/sw-offline-google-analytics/src/lib/replay-queued-requests.js":"/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/* eslint-env worker, serviceworker */\n\nimport IDBHelper from '../../../../lib/idb-helper.js';\nimport constants from './constants.js';\n\nconst idbHelper = new IDBHelper(constants.IDB.NAME, constants.IDB.VERSION,\n  constants.IDB.STORE);\n\n/**\n * Replays all the queued requests found in IndexedDB, by calling fetch()\n * with an additional parameter indicating the offset from the original time.\n *\n * Returns a promise that resolves when the replaying is complete.\n *\n * @private\n * @param {Object=}   config Optional configuration arguments.\n * @param {Object=}   config.parameterOverrides Optional\n *                    [Measurement Protocol parameters](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters),\n *                    expressed as key/value pairs, to be added to replayed\n *                    Google Analytics requests. This can be used to, e.g., set\n *                    a custom dimension indicating that the request was\n *                    replayed.\n * @param {Function=} config.hitFilter Optional\n *                    A function that allows you to modify the hit parameters\n *                    prior to replaying the hit. The function is invoked with\n *                    the original hit's URLSearchParams object as its only\n *                    argument. To abort the hit and prevent it from being\n *                    replayed, throw an error.\n * @return {Promise.<T>}\n */\n export default (config) => {\n  config = config || {};\n\n  return idbHelper.getAllKeys().then((urls) => {\n    return Promise.all(urls.map((url) => {\n      return idbHelper.get(url).then((hitTime) => {\n        const queueTime = Date.now() - hitTime;\n        const newUrl = new URL(url);\n\n        // Do not attempt to replay hits that are too old.\n        if (queueTime > constants.STOP_RETRYING_AFTER) {\n          return;\n        }\n\n        // Do not attempt to replay hits in browsers without\n        // URLSearchParams support.\n        if (!('searchParams' in newUrl)) {\n          return;\n        }\n\n        let parameterOverrides = config.parameterOverrides || {};\n        parameterOverrides.qt = queueTime;\n\n        // Call sort() on the keys so that there's a reliable order of calls\n        // to searchParams.set(). This isn't important in terms of\n        // functionality, but it will make testing easier, since the\n        // URL serialization depends on the order in which .set() is called.\n        Object.keys(parameterOverrides).sort().forEach((parameter) => {\n          newUrl.searchParams.set(parameter, parameterOverrides[parameter]);\n        });\n\n        // If the hitFilter config option was passed and is a function,\n        // invoke it with searchParams as its argument allowing the function\n        // to modify the hit prior to sending it. The function can also\n        // throw an error to abort the hit if needed.\n        let hitFilter = config.hitFilter;\n        if (typeof hitFilter === 'function') {\n          try {\n            hitFilter(newUrl.searchParams);\n          } catch (err) {\n            return;\n          }\n        }\n\n        return fetch(newUrl.toString());\n      }).then(() => idbHelper.delete(url));\n    }));\n  });\n};\n"}